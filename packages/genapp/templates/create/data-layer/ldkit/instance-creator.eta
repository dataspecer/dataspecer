import { Entity } from "ldkit/types/library/lens/types";
import { QueryContext, SchemaInterface, createLens, QueryEngine, Options } from "ldkit";
import { <%= it.instance_result_type %> } from <%~ it.instance_result_type_path %>;
import { <%= it.ldkit_schema %> } from <%~ it.ldkit_schema_path %>;
import { <%= it.creator_interface_type %> } from <%~ it.creator_interface_type_path %>;
import { IriGenerator, UUIDGenerator } from "../../../uuid-generator.ts";

class LdkitCreatorQueryEngine extends QueryEngine {

    override query(query: string, responseType: string, context?: QueryContext): Promise<Response> {
        const endpoint = this.getSparqlEndpoint(context);
        const fetchFn = this.getFetch(context);
        return fetchFn(endpoint, {
            method: "POST",
            headers: {
                "accept": responseType,
                "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
            },
            body: new URLSearchParams({
                update: query,
            }),
        });
    }

}

export class <%= it.exported_object_name %> implements <%= it.creator_interface_type %>  {

    private _customEngine: QueryEngine;
    private readonly _idGenerator: IriGenerator; // TODO

    constructor() {
        this._customEngine = new LdkitCreatorQueryEngine();
        this._idGenerator = new IriGenerator(UUIDGenerator.getGenerator()); // TODO
    }

    private mapFormDataToLdkitSchema(formData: object): Entity<SchemaInterface<typeof <%= it.ldkit_schema %>>> {
        const newInstance: Entity<SchemaInterface<typeof <%= it.ldkit_schema %>>> = this.updateLdkitProperties(formData);
        return {
            ...newInstance,
            "$id": this._idGenerator.generateIri(),
        };
    }

    private updateLdkitProperties(formData: object) {

        if (typeof formData !== "object" || !formData) {
            return formData;
        }

        const transformed = Object.entries(formData)
            .map(([key, value]) => {
                if (key === "@type") {
                    return ["$type", value];
                }

                if (Array.isArray(value)) {
                    return [key, value.map(item => this.updateLdkitProperties(item))];
                }

                if (typeof value === "object") {
                    return [key, this.updateLdkitProperties(value)];
                }

                return [key, value];
            });

        return Object.fromEntries(transformed);
    }

    async createInstance(formData: object): Promise<<%= it.instance_result_type %>> {

        const options: Options = {
            sources: [<%~ it.sparql_endpoint_uri %>],
            engine: this._customEngine
        }

        const lens = createLens(<%= it.ldkit_schema %>, options);
        const newInstance: Entity<SchemaInterface<typeof <%= it.ldkit_schema %>>> = this.mapFormDataToLdkitSchema(formData);

        try {
            await lens.insert(newInstance);
            const result: <%= it.instance_result_type %> = {
                instance: {
                    aggregateName: "<%= it.aggregate_name %>",
                    raw: newInstance.$id
                },
                message: "Instance created successfully",
                redirectUrl: "/"
            }

            return result;
        } catch (error) {
            const errorResult: <%= it.instance_result_type %> = {
                instance: null,
                message: "Instance creation failed",
                redirectUrl: "/"
            };

            return errorResult;
        }
    }
}

// https://rjsf-team.github.io/react-jsonschema-form/
import { useState } from "react";
import Form from "@rjsf/mui";
import { Button, Backdrop, CircularProgress } from "@mui/material";
import Alert from '@mui/material/Alert';
import validator from "@rjsf/validator-ajv8";
import SendIcon from "@mui/icons-material/Send";
import Typography from '@mui/material/Typography';
import { RJSFSchema, RJSFValidationError } from "@rjsf/utils";
import { <%= it.json_schema_name %> } from <%~ it.json_schema_path %>;
import { <%= it.navigation_hook %> } from <%~ it.navigation_hook_path %>;
import { <%= it.create_capability_app_layer %> } from <%~ it.create_capability_app_layer_path %>;

const <%= it.exported_object_name %> = () => {

    const [formData, setFormData] = useState<RJSFSchema>({});
    const [errorMessage, setErrorMessage] = useState<string>(null!);
    const [isLoading, setIsLoading] = useState<boolean>(false);
    const navigationHooks = <%= it.navigation_hook %>();

    const handleFormChange = (data: any, id?: string) => {
        // placeholder for any form change event handler
    }

    const handleFormSubmit = async (data: any, event: React.FormEvent<any>) => {
        event.preventDefault();

        const { formData } = data;
        setIsLoading(true);
        setFormData(formData);
        window.scrollTo(0, 0);
        const createdInstanceResult = await new <%= it.create_capability_app_layer %>().runCapability(formData);

        if (!createdInstanceResult?.instance?.raw) {
            setErrorMessage(createdInstanceResult?.message ?? "Creation failed");
            setIsLoading(false);
            return;
        }

        setTimeout(() => {
            setIsLoading(false);<% if (it.redirects && it.redirects.length > 0) { %><% const firstRedirect = it.redirects.at(0); %>
            <% if (firstRedirect && firstRedirect.capabilityType === "instance") { %>
            const newInstanceId = createdInstanceResult.instance?.raw as string;
            navigationHooks.handleInstanceCapabilityRedirect("<%~ firstRedirect.id %>", newInstanceId);
            <% } else { %>
            navigationHooks.handleCollectionCapabilityRedirect("<%~ firstRedirect.id %>");
            <% } %>
        <% } else { %>
            navigationHooks.handleCollectionCapabilityRedirect("/");
        <% } %>
        }, 2000);
    }

    const handleError = (errors: RJSFValidationError[]) => {
        console.error(errors);
        setErrorMessage("An error occurred");
    }

    return (
        <div>
            <Backdrop
                sx={(theme) => ({ color: '#fff', zIndex: theme.zIndex.drawer + 1 })}
                open={isLoading}
            >
                <CircularProgress color="inherit" />
            </Backdrop>
            { errorMessage && <Alert onClose={() => {setErrorMessage(null!)}} severity="error">{ errorMessage }</Alert> }<% const defaultPageTitle = `Create new "${it.aggregate.humanLabel}"` %>
            <Typography variant="h3">
                <%~ it.page_title ?? defaultPageTitle  %>
            </Typography>
            <Form
                schema={<%= it.json_schema_name %>}
                validator={validator}
                onChange={handleFormChange}
                onSubmit={handleFormSubmit}
                onError={handleError}
                formData={formData}
                showErrorList="top"
                uiSchema={<%~ it.ui_schema %>}
            >
                <Button
                    type="submit"
                    variant="contained"
                    endIcon={<SendIcon />}
                    sx={{ margin: "10px"}}
                >
                    Create New
                </Button>
            </Form>
        </div>
    );
}

export default <%= it.exported_object_name %>;

import React from "react";
import Table from "@mui/material/Table";
import Button from "@mui/material/Button";
import TableRow from "@mui/material/TableRow";
import TableBody from "@mui/material/TableBody";
import TableCell from "@mui/material/TableCell";
import TableHead from "@mui/material/TableHead";
import AddIcon from "@mui/icons-material/Add";
import Typography from '@mui/material/Typography';
import DeleteIcon from "@mui/icons-material/Delete";
import ListAltIcon from "@mui/icons-material/ListAlt";
import ZoomInMapIcon from "@mui/icons-material/ZoomInMap";
import TableContainer from "@mui/material/TableContainer";
import { Link } from "react-router-dom";
import { useEffect, useState } from "react";
import { Backdrop, CircularProgress } from "@mui/material";
import { <%= it.navigation_hook %> } from <%~ it.navigation_hook_path %>;<% const hasTransitions = it.instance_capability_options != null && it.instance_capability_options_path != null; %>
import { <%= it.list_capability_app_layer %> } from <%~ it.list_app_layer_path %>;
import { <%= it.aggregate_pagination %> } from <%~ it.aggregate_pagination_path %>;<% if (hasTransitions) { %>
import { <%= it.instance_capability_options %> } from <%~ it.instance_capability_options_path %>;
<% } %>
<%
    function getCapabilityButtonIcon(capabilityTransitionId) {

        switch(capabilityTransitionId) {
            case "list":
                return "<ListAltIcon />";
            case "detail":
                return "<ZoomInMapIcon />";
            case "create-instance":
                return "<AddIcon />";
            case "delete-instance":
                return "<DeleteIcon color=\"error\"/>";
            default:
                return "<></>";
        }

        return "<></>";
    }
%>
export default function <%= it.presentation_layer_component_name %>({ aggregateName }: { aggregateName: string }) {

    const pageState = useState(0);
    const pageRowsState = useState(10);
    const currentPage = pageState[0];
    const rowsPerPage = pageRowsState[0];
    const [itemsCount, setItemsCount] = useState<number | undefined>(undefined);
    const [refetch, setRefetchInstances] = useState<boolean>(false);

    const [instanceList, setInstanceList] = useState(undefined as unknown as object[]);
    const [isLoading, setisLoading] = useState<boolean>(true);
    const { handleCollectionCapabilityRedirect } = <%= it.navigation_hook %>();

    const stringify = (objectKey) => {
        return typeof objectKey == 'object'
            ? Object.keys(objectKey).filter(key => !["$id", "$type"].includes(key)).map(k => stringify(objectKey[k])).join(" || ")
            : objectKey.toString();
    }

    useEffect(() => {
        const fetchInstancesList = async () => {
            if (!instanceList || !itemsCount) {
                let listReader = new <%= it.list_capability_app_layer %>();

                const instanceCount = await listReader.readInstanceCount();

                if (!instanceCount || instanceCount === 0) {
                    console.error("No objects available");
                } else {
                    setItemsCount(instanceCount);
                    console.log(`Found ${instanceCount} corresponding objects`);
                    setRefetchInstances(false);
                }

                const listResult = await listReader.runCapability(
                    "<%= it.aggregate_name %>",
                    currentPage,
                    rowsPerPage
                );

                const instances = listResult.entities.map(res => res.raw);
                setisLoading(false);
                setInstanceList(instances);
            }
        }

        fetchInstancesList();
    }, [isLoading, aggregateName, instanceList, itemsCount, refetch, currentPage, rowsPerPage]);

    return (

        <>
            <Backdrop
                sx={(theme) => ({ color: '#fff', zIndex: theme.zIndex.drawer + 1 })}
                open={isLoading}
            >
                <CircularProgress color="inherit" />
            </Backdrop><% const defaultTablePageTitle = "List of items" %>
            <Typography variant="h3">
                <%~ it.page_title ?? defaultTablePageTitle %>
            </Typography>
            <% for (let index = 0; index < it.list_collection_transitions.length; index++) { %><% const collectionTransition = it.list_collection_transitions[index]; %>
            <Button
                id="<%= collectionTransition.id %>-transition-button"
                disabled={isLoading}
                variant="contained"
                sx={{ marginRight: 1 }}
                startIcon={<%~  getCapabilityButtonIcon(collectionTransition.targetId) %>}
                onClick={() => handleCollectionCapabilityRedirect("<%= collectionTransition.id %>")}
            >
                <%= collectionTransition.label %>: <%= it.aggregate_name %>
            </Button><% } %><% const defaultPageTitle = "List of \"\" items" %>
            <TableContainer>
                <Table sx={{ minWidth: 650 }} aria-label="<%= it.aggregate_name %> table"></Table>
                {instanceList &&
                    <React.Fragment>
                        <TableHead>
                            <TableRow>
                                <TableCell align="left">
                                    <strong>Index</strong>
                                </TableCell><% const propertyNames = Object.keys(it.table_schema.properties); const excludedNames = ["id", "type"]; %><% for (let index = 0; index < propertyNames.length; index++) { %><% const propertyName = propertyNames[index]; %><% if (excludedNames.includes(propertyName)) continue; %>
                                <TableCell key={<%= index %>} align="left" sx={{ maxWidth: window.innerWidth / <%= propertyNames.length - excludedNames.length %> }}>
                                    <strong><%= it.table_schema.properties[propertyName]?.title ?? propertyName %></strong>
                                </TableCell><% } %>
                                <% if (hasTransitions) { %>
                                <TableCell align="left">
                                    <strong>Actions</strong>
                                </TableCell>
                                <% } %>
                            </TableRow>
                        </TableHead>
                        <TableBody>
                            {
                                instanceList.map((instance, idx) =>
                                    <TableRow
                                        key={idx}
                                        sx={{ '&:last-child td, &:last-child th': { border: 0 } }}
                                    >
                                        <TableCell align="left">
                                            {idx + 1}
                                        </TableCell><% for (let index = 0; index < propertyNames.length; index++) { %><% const propertyName = propertyNames[index];%><% if (propertyName === "id" || propertyName === "type") continue; %>
                                        <TableCell key={<%= index %>} align="left" sx={{ maxWidth: window.innerWidth / <%= propertyNames.length - excludedNames.length %> }}>
                                            {stringify(instance["<%= propertyName %>"])}
                                        </TableCell><% } %><% if (hasTransitions) { %>
                                        <TableCell>
                                            <<%= it.instance_capability_options %> instanceId={instance["$id"]} />
                                        </TableCell><% } %>
                                    </TableRow>
                                )
                            }
                        </TableBody>
                    </React.Fragment>
                }
            </TableContainer>
            <<%= it.aggregate_pagination %>
                totalCount={itemsCount}
                pageState={pageState}
                pageRowsState={pageRowsState}
                refetch={async () => setRefetchInstances(true)}
            />
        </>
    )
}
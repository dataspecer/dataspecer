import { createLens, SchemaInterface } from "ldkit";
import { <%= it.list_reader_interface %> } from <%~ it.list_reader_interface_path %>;
import { <%= it.list_result_interface %> } from <%~ it.list_result_interface_path %>;

type NestedResultsMap = {
    [attrName: string]: SchemaInterface<any>[];
}

export type PaginatedReaderRequest = {
    currentPage: number,
    rowsPerPage: number
}

export abstract class <%= it.exported_object_name %> implements <%= it.list_reader_interface %> {

    private readonly _nestedResultsCache: NestedResultsMap;
    private readonly _nestedSchemaCache: { [attrName: string]: any };

    constructor() {
        this._nestedResultsCache = {};
        this._nestedSchemaCache = {};
    }

    abstract readInstanceList(): Promise<ListResult>;
    abstract readInstanceCount(): Promise<number | undefined>;

    private getNestedSchemas(schema: object): { [attrName: string]: object } {

        const nestedSchemas: { [attrName: string]: any } = {};

        Object.entries(schema)
            .forEach(([attrName, attrValue]) => {
                const nestedSchema = attrValue["@schema"];

                if (!nestedSchema) {
                    return;
                }

                nestedSchemas[attrName] = nestedSchema;
                this._nestedSchemaCache[attrName] = nestedSchema;
            });

        console.log("NESTED SCHEMAS X: ", nestedSchemas);

        return nestedSchemas;
    }

    private async tryPopulateInstanceIriValues(instances: SchemaInterface<any>[], nestedInstances: NestedResultsMap) {

        await Promise.all(instances.map(instance => {
            console.log(`Populating instance ${instances.length}`);
            Object.entries(instance)
                .forEach(([attrName, attrValue]) => {

                    if (["$id", "$type"].includes(attrName) || !Object.keys(nestedInstances).includes(attrName)) {
                        return;
                    }

                    if (Array.isArray(attrValue)) {
                        const result = attrValue.map(iri => {

                            if (typeof iri === "string" && (iri.startsWith("http"))) {
                                const populatedItem = nestedInstances[attrName].find(nestedInstance => nestedInstance.$id === iri);

                                return populatedItem ? populatedItem : iri;
                            }

                            return iri;
                        })
                        instance[attrName] = result;

                    }

                    if (typeof attrValue === "string" && (attrValue.startsWith("http"))) {
                        const populatedItem = nestedInstances[attrName].find(nestedInstance => nestedInstance.$id === attrValue);
                        instance[attrName] = populatedItem ? populatedItem : attrValue;
                    }
                });
            return instance;
        })
        );
    }

    protected async ldkitFind(baseAttrName: string, schema: any, recursionDepth: number, request?: PaginatedReaderRequest): Promise<SchemaInterface<any>[]> {

        console.log("USING SCHEMA: ", schema);

        if (recursionDepth < 3) {
            const nestedSchemas = this.getNestedSchemas(schema);
            Object.entries(nestedSchemas)
                .forEach(([attrName, nestedSchema]) => {
                    this.ldkitFind(attrName, nestedSchema, recursionDepth + 1);
                });
        }

        const lens = createLens(schema);
        let instances = (request === null || request === undefined)
            ? await lens.find()
            : await lens.find({
                take: request.rowsPerPage,
                skip: request.rowsPerPage * request.currentPage
            });

        instances = instances
            .filter(instance => instance !== null && instance !== undefined)
            .map(instance => {

                if (!("id" in instance)) {
                    instance["id"] = instance["$id"];
                }

                return instance;
            });

        this._nestedResultsCache[baseAttrName] = instances;
        console.log(`Found ${instances.length} items for schema: ${schema["@type"]}`);

        this.tryPopulateInstanceIriValues(instances, this._nestedResultsCache);

        return instances;
    }
}


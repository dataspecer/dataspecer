import { createLens, type Options, setGlobalOptions } from "ldkit";
import { <%= it.ldkit_list_reader_base_class %> } from <%~ it.ldkit_list_reader_base_class_path %>;
import { <%= it.ldkit_schema %> } from <%~ it.ldkit_schema_path %>;

export default class <%= it.aggregate_name %> extends <%= it.ldkit_list_reader_base_class %> {

    async readInstanceCount(): Promise<number | undefined> {
        const lens = createLens(<%= it.ldkit_schema %>);
        return lens.count();
    }

    async readInstanceList<T>(request?: any): Promise<T> {

        const options: Options = {
            sources: [<%~ it.ldkit_endpoint_uri %>]
        }

        setGlobalOptions(options);
        try{<% const instanceListVariableName = it.aggregate_name.toLowerCase() + "Instances"; %>
            const <%= instanceListVariableName %> = await this.ldkitFind(".", <%= it.ldkit_schema %>, 0, request);

            if (!<%= instanceListVariableName %>) {
                throw new Error("Error on data read.");
            }

            const aggInstances = <%= instanceListVariableName %>.map(entity => {
                return {
                    aggregateName: "<%= it.aggregate_name %>",
                    raw: entity
                };
            })

            const result: T = {
                entities: aggInstances
            } as unknown as T

            return result;
        } catch {
            const emptyResult: T = {
                entities: []
            } as unknown as T

            return emptyResult;
        }
    }
}

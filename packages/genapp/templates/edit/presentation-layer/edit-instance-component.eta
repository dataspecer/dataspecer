// https://rjsf-team.github.io/react-jsonschema-form/
import { useState, useEffect } from "react";
import Form from "@rjsf/mui";
import Alert from '@mui/material/Alert';
import validator from "@rjsf/validator-ajv8";
import SendIcon from "@mui/icons-material/Send";
import DeleteIcon from "@mui/icons-material/Delete";
import { useSearchParams } from "react-router-dom";
import { Backdrop, Button, CircularProgress, Typography } from "@mui/material";
import { RJSFSchema, RJSFValidationError } from "@rjsf/utils";
import { <%= it.navigation_hook %> } from <%~ it.navigation_hook_path %>;
import { <%= it.edit_capability_app_layer %> } from <%~ it.edit_capability_app_layer_path %>;
import { <%= it.edit_get_detail_app_layer %> } from <%~ it.edit_get_detail_app_layer_path %>;

const <%= it.exported_object_name %> = () => {

    const [isLoading, setIsLoading] = useState<boolean>(true);
    const [formData, setFormData] = useState<RJSFSchema>({});
    const [searchParams, _] = useSearchParams();
    const [errorMessage, setErrorMessage] = useState<string>(null!);
    const navigationHooks = <%= it.navigation_hook %>();

    const schema: RJSFSchema = <%~ it.json_schema %> as RJSFSchema;

    const handleFormChange = (data: any, id?: string) => {
      console.log("element id: ", id);
      console.log("DATA: ", data);
    }

    useEffect(() => {

        const fetchInstanceDetail = async () => {
            if (!formData || Object.keys(formData).length === 0) {
                const id = searchParams.get("instanceId");

                if (!id) {
                    // setMissingInstance(true);
                    setIsLoading(false);
                    return;
                }

                const result = await new <%= it.edit_get_detail_app_layer %>().runCapability(id);

                setIsLoading(false);

                if (!result?.instance?.raw) {
                    // setMissingInstance(true);
                    return;
                }

                setFormData(result.instance.raw);
            }
        }

        fetchInstanceDetail();
    }, [isLoading, formData, searchParams]);

    const submitEditedInstance = async (data: any, event: React.FormEvent<any>) => {
        event.preventDefault();

        const { formData } = data;
        const editedInstanceResult = await new <%= it.edit_capability_app_layer %>().runCapability(formData);

        if (!editedInstanceResult?.instance?.raw) {
            setErrorMessage(editedInstanceResult?.message ?? "Update failed");
            return;
        }

        // get editedInstanceResult id
        setTimeout(() => {<% if (it.redirects && it.redirects.length > 0) { %><% const firstRedirect = it.redirects.at(0); %><% if (firstRedirect && firstRedirect.capabilityType === "instance") { %>
            const editedInstanceId = editedInstanceResult.instance?.raw as string;
            navigationHooks.handleInstanceCapabilityRedirect("<%~ firstRedirect.id %>", editedInstanceId);<% } else { %>
            navigationHooks.handleCollectionCapabilityRedirect("<%~ firstRedirect.id %>");<% } %><% } else { %>
            navigationHooks.handleCollectionCapabilityRedirect("/");<% } %>
        }, 2500);
    }

    const handleSubmitError = (errors: RJSFValidationError[]) => {
        console.error(errors);
        setErrorMessage("An error occurred");
    }

    return (
        <div>
            { errorMessage && <Alert onClose={() => {}} severity="error">{ errorMessage }</Alert> }
            <Backdrop
                sx={(theme) => ({ color: '#fff', zIndex: theme.zIndex.drawer + 1 })}
                open={isLoading}
            >
                <CircularProgress color="inherit" />
            </Backdrop>
            {
                !isLoading && (
                    <><% const defaultPageTitle = `Modify "${it.aggregate_name}" object` %>
                        <Typography variant="h3">
                            <%~ it.page_title ?? defaultPageTitle %>
                        </Typography>
                        <Form
                            schema={schema}
                            validator={validator}
                            onChange={handleFormChange}
                            onSubmit={submitEditedInstance}
                            onError={handleSubmitError}
                            uiSchema={{}}
                            formData={formData}
                            showErrorList="top"
                        >
                            <Button type="button" variant="outlined" startIcon={<DeleteIcon />}>Cancel</Button>
                            <Button type="submit" variant="contained" endIcon={<SendIcon />} sx={{ margin: "10px"}}>Submit</Button>
                        </Form>
                    </>
                )
            }
        </div>
    );
}

export default <%= it.exported_object_name %>;

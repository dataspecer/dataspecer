import {
    useEffect,
    useState
} from "react";
import { Form } from "@rjsf/mui";
import validator from "@rjsf/validator-ajv8";
import { useSearchParams } from "react-router-dom";
import Alert from "@mui/material/Alert";
import Box from "@mui/material/Box";
import Button from "@mui/material/Button";
import Typography from "@mui/material/Typography";
import { Backdrop, CircularProgress } from "@mui/material";
import { AggregateInstance } from "../../interfaces/capability-result";
import { <%= it.navigation_hook %> } from <%~ it.navigation_hook_path %>;
import { <%= it.json_schema_name %> } from <%~ it.json_schema_path %>;
import { <%= it.detail_capability_app_layer %> } from <%~ it.detail_app_layer_path %>;

export default function <%= it.export_name %>() {

    const [instance, setInstance] = useState<AggregateInstance>();
    const [isMissingInstance, setMissingInstance] = useState<boolean>(false);
    const [isLoading, setIsLoading] = useState<boolean>(true);
    const [searchParams] = useSearchParams();
    const [instanceId, setInstanceId] = useState<string>("");
    const navigationHooks = <%= it.navigation_hook %>();

    const handleDetailClick = (link: string, capabilityType: string) => {

        if (capabilityType === "instance") {
            navigationHooks.handleInstanceCapabilityRedirect(link, instanceId);
        } else {
            navigationHooks.handleCollectionCapabilityRedirect(link);
        }
    }

    useEffect(() => {

        const fetchInstanceDetail = async () => {
            if (!instance) {
                const id = searchParams.get("instanceId");

                if (!id) {
                    setMissingInstance(true);
                    setIsLoading(false);
                    return;
                }

                const result = await new <%= it.detail_capability_app_layer %>().runCapability(id);

                setIsLoading(false);
                if (!result?.instance?.raw) {
                    setMissingInstance(true);
                    return;
                }

                setInstance(result.instance);
                setInstanceId(id);
            }
        }

        fetchInstanceDetail();
    }, [isLoading, instance, searchParams]);

    return (
        <><% const defaultPageTitle = `Detail of "${it.aggregate.humanLabel}"` %>
            <Typography variant="h3">
                <%~ it.page_title ?? defaultPageTitle %>
            </Typography>
            <Backdrop
                sx={(theme) => ({ color: "#fff", zIndex: theme.zIndex.drawer + 1 })}
                open={isLoading}
            >
                <CircularProgress color="inherit" />
            </Backdrop>
            <% for (let index = 0; index < it.capability_transitions.length; index++) { %><% const transition = it.capability_transitions[index]; %>
                <Button key={"<%= transition.id %>"} id="<%= transition.id %>-transition-button" disabled={isLoading} sx={{ marginRight: 1 }} variant="contained" onClick={() => handleDetailClick("<%= transition.id %>", "<%= transition.capabilityType %>")}><%= transition.label %></Button>
            <% } %>
            { isMissingInstance && <Alert onClose={() => {}} severity="error">{`No valid instance found for ${instanceId}`}</Alert> }
            { instance &&
                <Box id="<%= it.aggregate.technicalLabel %>-detail" component="section">
                    <Form
                        schema={<%= it.json_schema_name %>}
                        validator={validator}
                        readonly={true}
                        uiSchema={<%~ it.ui_schema %>}
                        formData={instance.raw}
                        showErrorList="top"
                    />
                </Box>
            }
        </>
    )
}
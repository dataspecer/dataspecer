import { Options, setGlobalOptions, createLens, SchemaInterface } from "ldkit";
import { <%= it.ldkit_instance_reader %> } from <%~ it.ldkit_instance_reader_path %>;
import { <%= it.instance_result_type %> } from <%~ it.instance_result_type_path %>;
import { <%= it.ldkit_schema %> } from <%~ it.ldkit_schema_path %>;

export default class <%= it.exported_name_object %> implements <%= it.ldkit_instance_reader %> {

    async readInstance(instanceIri: string): Promise<<%= it.instance_result_type %>> {

        const options: Options = {
            sources: [<%~ it.ldkit_endpoint_uri %>]
        }

        setGlobalOptions(options);
        <% const instanceVariable = `${it.aggregate_name}InstanceDetail`; %>
        const <%= instanceVariable %> = await this.getInstanceDetail(instanceIri, <%= it.ldkit_schema %>);

        if (!<%= instanceVariable %>) {
            const emptyResult: <%= it.instance_result_type %> = {
                instance: {
                    aggregateName: "<%= it.aggregate_name %>",
                    raw: null
                }
            };

            return emptyResult;
        }

        const result: <%= it.instance_result_type %> = {
            instance: {
                aggregateName: "<%= it.aggregate_name %>",
                raw: <%= instanceVariable %>
            }
        }

        return result;
    }

    private async getInstanceDetail(iri: string, schema: any) {
        const lens = createLens(schema);
        let instanceDetail = await lens.findByIri(iri);

        if (!instanceDetail) {
            return null;
        }

        instanceDetail = this.removeLdkitProperties(instanceDetail);

        return instanceDetail;
    }

    private removeLdkitProperties(instanceDetail: any) {

        if (typeof instanceDetail !== "object") {
            return instanceDetail;
        }

        if ("$id" in instanceDetail) {
            instanceDetail["id"] = instanceDetail["$id"];
        }

        const transformed = Object.entries(instanceDetail)
            .map(([key, value]): [string | null, any] => {

                if (key.startsWith("$")) {
                    return [null, value];
                }

                if (Array.isArray(value)) {
                    return [key, value.map(item => this.removeLdkitProperties(item))];
                }

                if (typeof value === "object") {
                    return [key, this.removeLdkitProperties(value)];
                }

                return [key, value];
            }
        )
        .filter(([key, _]) => key !== null);

        return Object.fromEntries(transformed);
    }
}

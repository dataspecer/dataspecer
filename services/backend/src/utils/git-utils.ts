// TODO RadStr: Move the content of this file into package probably

import express from "express"

import YAML from "yaml";

export function createUniqueCommitMessage(): string {
  return "Autogenerated commit message" + Date.now();
}

/**
 * If the given {@link commitMessage} is of length 0, then it is transformed to null.
 * Otherwise the {@link commitMessage} is returned
 */
export function transformCommitMessageIfEmpty(commitMessage: string): string | null {
  const transformedCommitMessage = commitMessage.length === 0 ? null : commitMessage;
  return transformedCommitMessage;
}


// TODO RadStr: Not really git util
export function createURLFromExpressRequest(request: express.Request): string {
  return `${request.protocol}://${request.get("host")}${request.originalUrl}`;
}

export function convertExpressRequestToNormalRequest(url: string, request: express.Request) {
  const convertedRequest  = new Request(url, {
    method: request.method,
    headers: request.headers as Record<string, string>,
    // body: req.method !== "GET" && req.method !== "HEAD" ? req : undefined,
  });

  return convertedRequest;
}

// TODO RadStr: Once again not exactly git util
/**
 * Note that we also use this on paths on filesystem for {@link ClassicFilesystem}.
 * This is for simplicity and uniformity, even though we should ideally use "\\" on Windows (that is path.sep).
 * But it really complicates stuff since we then have to spend extra mental capacity on thinking whether given can use OS specific separators or it is IRI.
 * @returns Given {@link pathParts} joined by "/".
 */
export function dsPathJoin(...pathParts: string[]) {
  return pathParts.join("/");
}


// TODO RadStr: Once again maybe not git-utils
/**
 * Inverse to {@link stringifyDatastoreBasedOnFormat}
 * @param shouldConvert if false then returns the given {@link datastoreContent} without performing any converting action.
 * @returns Returns {@link datastoreContent} in format of string to the format in which is the string content (that is what we got from the name extension, for example .json).
 */
export function convertDatastoreBasedOnFormat(datastoreContent: string, format: string | null, shouldConvert: boolean): any {
  if (!shouldConvert) {
    return datastoreContent;
  }

  if (format === "json") {
    return JSON.parse(datastoreContent);
  }
  else if (format === "yaml") {
    return YAML.parse(datastoreContent);
  }

  return datastoreContent;
}


// TODO RadStr: Once again maybe not git-utils
/**
 * Inverse to {@link convertDatastoreBasedOnFormat}
 * @returns Stringified {@link datastoreContent}, which was on input in given {@link foramt}. If {@link shouldConvert}, then just returns the {@link datastoreContent}.
 */
export function stringifyDatastoreBasedOnFormat(datastoreContent: any, format: string | null, shouldConvert: boolean): string {
  if (!shouldConvert) {
    return datastoreContent;
  }

  const indent = 2;

  if (format === "json") {
    return JSON.stringify(datastoreContent, null, indent);
  }
  else if (format === "yaml") {
    return YAML.stringify(datastoreContent, { indent });
  }

  return datastoreContent;
}
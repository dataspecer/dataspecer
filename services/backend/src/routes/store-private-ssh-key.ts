import { z } from "zod";
import { asyncHandler } from "../utils/async-handler.ts";
import fs from "fs";
import express from "express";

/**
 * Generated by ChatGPT
 */
function wrapPrivateKey(keyData: string, type: "RSA" | "OPENSSH" = "OPENSSH"): string {
  // Normalize: remove whitespace/newlines
  const cleanKey = keyData.replace(/\s+/g, "");

  // Split into 64-character lines (PEM standard)
  const formattedKey = cleanKey.match(/.{1,64}/g)?.join("\n") ?? cleanKey;

  return `-----BEGIN ${type} PRIVATE KEY-----\n${formattedKey}\n-----END ${type} PRIVATE KEY-----`;
}


export const storePrivateSSHKey = asyncHandler(async (request: express.Request, response: express.Response) => {
  const bodySchema = z.object({
    privateSSHKey: z.string().min(1),
  });

  const authenticatedUser = response.locals.session?.user;
  if (authenticatedUser === undefined) {
    response.sendStatus(401);
    return;
  }

  const { privateSSHKey } = bodySchema.parse(request.body);

  const fileContent = wrapPrivateKey(privateSSHKey);

  const sshKeysRootDirectory = "./ds-users/.ssh";
  fs.mkdirSync(sshKeysRootDirectory, {recursive: true});
  fs.writeFileSync(`${sshKeysRootDirectory}/private-ssh-key-${authenticatedUser.accountProvider}-${authenticatedUser.providerAccountId}`, fileContent);

  const nweConfigEntry = `Host github-work
    HostName github.com
    User git
    IdentityFile ~/.ssh/id_rsa_work\n`;

  response.status(200);
  return;
});

import { z } from "zod";
import { asyncHandler } from "../utils/async-handler.ts";
import fs from "fs";
import express from "express";
import path from "path";
import os from "os";

/**
 * Generated by ChatGPT
 */
function wrapPrivateKey(keyData: string, type: "RSA" | "OPENSSH" = "OPENSSH"): string {
  // Normalize: remove whitespace/newlines
  const cleanKey = keyData.replace(/\s+/g, "");

  // Split into 64-character lines (PEM standard)
  const formattedKey = cleanKey.match(/.{1,64}/g)?.join("\n") ?? cleanKey;

  // Not ChatGPT - but I notcited that it has to end with empty line
  return `-----BEGIN ${type} PRIVATE KEY-----\n${formattedKey}\n-----END ${type} PRIVATE KEY-----\n`;
}

/**
 * We need this because the path inside ssh config file does not seem to correctly work for absolute paths,
 *  it either has to be relative, or C:/ has to be converted to /c/
 */
const relativizeAgainstHomeDir = (givenPath: string): string => {
  return path.relative(path.join(os.homedir(), ".ssh"), givenPath).replace(/\\/g, "/");
};


const sshKeysRootDirectory = path.resolve("./ds-users/.ssh");
export const sshDSConfigPath = path.resolve(`${sshKeysRootDirectory}/config`);
const sshDSConfigPathRelativeToHomeDir = relativizeAgainstHomeDir(sshDSConfigPath);



export const storePrivateSSHKey = asyncHandler(async (request: express.Request, response: express.Response) => {
  const bodySchema = z.object({
    privateSSHKey: z.string().min(1),
  });

  const authenticatedUser = response.locals.session?.user;
  if (authenticatedUser === undefined) {
    response.sendStatus(401);
    return;
  }

  const { privateSSHKey } = bodySchema.parse(request.body);

  const fileContent = wrapPrivateKey(privateSSHKey);

  fs.mkdirSync(sshKeysRootDirectory, {recursive: true});

  const userSSHIdentifer = createUserSSHIdentifier(authenticatedUser);
  const privateSSHKeyFilePath = path.normalize(`${sshKeysRootDirectory}/private-ssh-key-${userSSHIdentifer}`);
  fs.writeFileSync(privateSSHKeyFilePath, fileContent);

  // Hardcoded for github
  const newConfigEntry = `Host ${userSSHIdentifer}
    HostName github.com
    User git
    IdentityFile ${privateSSHKeyFilePath}\n\n`;

  fs.appendFileSync(sshDSConfigPath, newConfigEntry);

  // Include our config into the config in home directory
  const homeDirectorySSHConfigPath = path.join(os.homedir(), ".ssh", "config");
  const includesStringForConfig = `Include ${sshDSConfigPathRelativeToHomeDir}`;
  if (!fs.existsSync(homeDirectorySSHConfigPath)) {
    fs.writeFileSync(homeDirectorySSHConfigPath, includesStringForConfig);
  }
  else {
    if (!fs.readFileSync(homeDirectorySSHConfigPath).includes(includesStringForConfig)) {
      fs.appendFileSync(homeDirectorySSHConfigPath, `\n${includesStringForConfig}`);
    }
  }

  response.status(200);
  return;
});


export const createUserSSHIdentifier = (authenticatedUser: any) => {
  const userSSHIdentifer = `${authenticatedUser.accountProvider}-${authenticatedUser.providerAccountId}`;
  return userSSHIdentifer;
};
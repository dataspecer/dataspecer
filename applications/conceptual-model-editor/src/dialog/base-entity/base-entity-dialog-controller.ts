import { CmeSemanticModel } from "../../dataspecer/cme-model";
import { BaseEntityDialogState } from "./base-entity-dialog-state";
import { validateBaseEntityDialogState } from "./base-entity-dialog-validation";
import { getAvailableLanguagesForLanguageString } from "../../util/language-utils";
import { LanguageString } from "../../dataspecer/entity-model";
import { removeFromArray } from "../../utilities/functional";
import { CmeReference, CmeSpecialization, NewCmeSpecialization } from "../../dataspecer/cme-model/model";

type SetLanguageString = (value: LanguageString) => LanguageString;

export interface BaseEntityDialogController {

  /**
   * Change model the entity should belong to.
   */
  setModel: (model: CmeSemanticModel) => void;

  /**
   * Set entity IRI, the meaning is not specified on this level.
   */
  setIri: (value: string) => void;

  /**
   * Switch between relative and absolute IRI.
   */
  setIsIriRelative: (value: boolean) => void;

  /**
   * Set entity name.
   */
  setName: (setter: SetLanguageString) => void;

  /**
   * Set entity description.
   */
  setDescription: (setter: SetLanguageString) => void;

  /**
   * Add is specialization of given entity.
   */
  addSpecialization: (entity: CmeReference) => void;

  /**
   * Remove given specialization.
   */
  removeSpecialization: (value: NewCmeSpecialization | CmeSpecialization) => void;

  /**
   * Set external documentation URL.
   */
  setExternalDocumentationUrl: (value: string) => void;

}

export function createBaseEntityDialogController<
  StateType extends BaseEntityDialogState,
>(
  changeState: (next: StateType | ((prevState: StateType) => StateType)) => void,
  generateIriFromName: (name: string) => string,
): BaseEntityDialogController {

  const setModel = (model: CmeSemanticModel) => changeState(state => ({
    ...state,
    model: model,
  }));

  const setIri = (iri: string) => changeState(state => validateBaseEntityDialogState({
    ...state,
    iri,
    isIriAutogenerated: false,
  }));

  const setIsIriRelative = (value: boolean) => changeState(state => {
    let iri;
    if (value) {
      // We change from absolute to relative.
      iri = state.iri.replace(state.model.baseIri ?? "", "");
    } else {
      // We change form relative to absolute.
      iri = (state.model.baseIri ?? "") + state.iri;
    }
    return validateBaseEntityDialogState({
      ...state,
      iri,
      isIriRelative: value,
    });
  });

  const setName = (setter: SetLanguageString) => changeState(state => {
    const name = setter(state.name);
    if (!state.isIriAutogenerated) {
      return { ...state, name };
    }
    //
    const languages = getAvailableLanguagesForLanguageString(name);
    if (languages.length === 0) {
      return state;
    }
    return validateBaseEntityDialogState({
      ...state,
      name,
      iri: generateIriFromName(name[languages[0]] ?? ""),
    });
  });

  const setDescription = (setter: SetLanguageString) => changeState(state => ({
    ...state,
    description: setter(state.description),
  }));

  const addSpecialization = (entity: CmeReference) => changeState(state => ({
    ...state, specializations: [...state.specializations, {
      specializationOf: entity,
      iri: null,
    }],
  }));

  const removeSpecialization = (value: NewCmeSpecialization | CmeSpecialization) =>
    changeState(state => ({
      ...state,
      specializations: removeFromArray(value, state.specializations),
    }));

  const setExternalDocumentationUrl = (value: string) => changeState(state => {
    return {
      ...state,
      externalDocumentationUrl: value,
    }
  });

  return {
    setModel,
    setIri,
    setIsIriRelative,
    setName,
    setDescription,
    addSpecialization,
    removeSpecialization,
    setExternalDocumentationUrl,
  };
}

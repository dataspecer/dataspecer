import { useMemo } from "react";
import { DialogProps } from "../dialog-api";
import { configuration } from "../../application";
import {
  type DataTypeRepresentative,
  type EntityRepresentative,
  filterByModel,
  type RelationshipRepresentative
} from "../utilities/dialog-utilities";
import { AttributeProfileDialogState } from "./edit-attribute-profile-dialog-state";
import {
  type BaseEntityProfileDialogController,
  createBaseEntityProfileDialogController,
} from "../base-entity-profile/base-entity-profile-dialog-controller";
import {
  type BaseRelationshipProfileDialogController,
  createBaseRelationshipProfileDialogController,
} from "../base-relationship-profile/base-relationship-profile-dialog-controller";
import { CmeSemanticModel } from "../../dataspecer/cme-model";
import { LanguageString } from "../../dataspecer/entity-model";
import { validateBaseEntityDialogState } from "../base-entity/base-entity-dialog-validation";

export interface EditAttributeDialogController extends
  BaseEntityProfileDialogController<RelationshipRepresentative>,
  BaseRelationshipProfileDialogController<DataTypeRepresentative> { }

export function useAttributeProfileDialogController(
  { changeState }: DialogProps<AttributeProfileDialogState>,
): EditAttributeDialogController {

  return useMemo(() => {

    const entityProfileController = createBaseEntityProfileDialogController(
      changeState, configuration().relationshipNameToIri);

    const relationshipProfileController = createBaseRelationshipProfileDialogController(
      changeState, filterByModel, filterByModel);

    const setModel = (model: CmeSemanticModel) => {
      entityProfileController.setModel(model);
      relationshipProfileController.updateDomains(model);
      changeState(state => configuration().relationshipProfileToIri(state));
    };

    const setName = (setter: (value: LanguageString) => LanguageString): void => {
      changeState(state => {
        const result = { ...state, name: setter(state.name) };
        return configuration().relationshipProfileToIri(result);
      });
    };

    const setDomain = (value: EntityRepresentative): void => {
      relationshipProfileController.setDomain(value);
      changeState(state => configuration().relationshipProfileToIri(state));
    };

    const setIri = (iri: string) => {
      changeState((state) => validateBaseEntityDialogState({
        ...state, iri, isIriAutogenerated: false,
      }));
    };

    return {
      ...entityProfileController,
      ...relationshipProfileController,
      setModel,
      setName,
      setDomain,
      setIri,
    };
  }, [changeState]);
}

import { Configuration, RelationshipIriGeneratorStrategy } from "./configuration";
import { lowerCamelCase, upperCamelCase } from "./policy/naming-style-policy";

const PREFIXES = {
  "http://www.w3.org/2001/XMLSchema#": "xml",
  "http://www.w3.org/1999/02/22-rdf-syntax-ns#": "rdf",
  "http://www.w3.org/2000/01/rdf-schema#": "rdfs",
  "http://www.w3.org/ns/adms#": "adms",
  "http://www.w3.org/ns/dcat#": "dcat",
  "http://data.europa.eu/r5r/": "dcatap",
  "http://purl.org/dc/terms/": "dcterms",
  "http://xmlns.com/foaf/0.1/": "foaf",
  "http://www.w3.org/2002/07/owl#": "owl",
};

/**
 * Generate relationship profile IRI.
 */
const relationshipProfileToIri: RelationshipIriGeneratorStrategy = (state) => {
  if (!state.isIriAutogenerated) {
    return state;
  }
  const domainName = upperCamelCase(
    state.domain.name[state.language] ?? "");
  const name = lowerCamelCase(
    state.name[state.language] ?? "");
  //
  return {
    ...state,
    iri: domainName + "." + name,
  };
};

export const defaultConfiguration: Configuration = Object.freeze({
  configurationName: "Default",
  languagePreferences: ["en", "cs"],
  classNameToIri: upperCamelCase,
  relationshipNameToIri: lowerCamelCase,
  relationshipProfileToIri,
  hideIdentifier: true,
  hideRelationCardinality: true,
  xSnapGrid: 10,
  ySnapGrid: 10,
  alignmentXSnapGrid: 20,
  alignmentYSnapGrid: 20,
  defaultModelColor: "#000069",
  prefixes: PREFIXES,
});

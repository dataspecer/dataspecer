import { LanguageString } from "@dataspecer/core-v2/semantic-model/concepts";
import { defaultConfiguration } from "./default-configuration";
import { developerConfiguration } from "./developer-configuration";

export type NameToIriStrategy = (name: string) => string;

export type RelationshipIriGeneratorStrategy = <
  DomainType extends { name: LanguageString; },
  StateType extends {
    isIriAutogenerated: boolean;
    language: string;
    name: LanguageString;
    domain: DomainType,
  }>  (state: StateType) => StateType;

/**
 * Configuration is set when the website application loads.
 * It can not be changed without re-loading the application.
 *
 * Different configurations should correspond to different profiles.
 *
 * As a result, there is no need to provide it using react context.
 */
export interface Configuration {

  /**
   * Human readable name of the configuration.
   */
  configurationName: string;

  /**
   * When primary language is missing languages
   * in this list are used.
   *
   * When there is no language from this list we
   * we use anything.
   */
  languagePreferences: string[];

  /**
   * Suggestion of an IRI from class name for classes and class profiles.
   */
  classNameToIri: NameToIriStrategy;

  /**
   * Suggestion of an IRI from relationship name.
   */
  relationshipNameToIri: NameToIriStrategy;

  /**
   * Given information about relationship profile returns
   * a suggested relative IRI.
   */
  relationshipProfileToIri: RelationshipIriGeneratorStrategy;

  /**
   * When true identifiers should not be visible to the user.
   */
  hideIdentifier: boolean;

  /**
   * If true cardinalities for attributes and associations are
   * not visible to the user.
   * In addition they are also set to null for new entities.
   */
  hideRelationCardinality: boolean;

  /**
   * Value for reactflow's snap grid - x coordinate
   */
  xSnapGrid: number;

  /**
   * Value for reactflow's snap grid - y coordinate
   */
  ySnapGrid: number;

  /**
   * Specifies the distance after which should the alignment line disappear.
   * Should be multiple of xSnapGrid - x coordinate.
   */
  alignmentXSnapGrid: number;

  /**
   * Specifies the distance after which should the alignment line disappear.
   * Should be multiple of ySnapGrid - y coordinate.
   */
  alignmentYSnapGrid: number;

  /**
   * Fallback model color.
   */
  defaultModelColor: string;

  /**
   * For a given IRI contains a name.
   * This allow us to alias multiple IRIs to same name.
   */
  prefixes: {[iri: string]: string};
}

const CONFIGURATIONS: Record<string, Configuration> = {
  "dev": developerConfiguration,
};

/**
 * Name of an URL query key used to get configuration.
 */
const CONFIGURATION_QUERY_KEY = "configuration";

// When executing tests we use "nodejs" environment.
// Tha is a problem as window does not exists there.
// So this trick make it work.
let window: any;

const activeConfiguration = (() => {
  const params = new URLSearchParams(window?.location?.search ?? "");
  const name = params.get(CONFIGURATION_QUERY_KEY) ?? "";
  return CONFIGURATIONS[name] ?? defaultConfiguration;
})();

export const configuration = () => activeConfiguration;

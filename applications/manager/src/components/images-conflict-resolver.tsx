import { useState } from "react";

type SvgVersion = "original" | "modified";

const SvgVisualDiff = (props: { originalSvg: string, modifiedSvg: string }) => {
  const [selected, setSelected] = useState<SvgVersion>("modified");

  return (
    <div className="flex h-screen">
      <SvgImage svgString={props.originalSvg} selected={selected === "original"} onClick={() => setSelected("original")} />
      <div className="border-l border-gray-400" />
      <SvgImage svgString={props.modifiedSvg} selected={selected === "modified"} onClick={() => setSelected("modified")} />
    </div>
  );
};

/**
 * Core functionality generated by ChatGPT
 */
function SvgImage(props: { svgString: string, selected: boolean, onClick: () => void }) {
  const encoded = encodeURIComponent(props.svgString)
    // Ensure proper XML/SVG encoding for special characters
    .replace(/'/g, "%27")
    .replace(/"/g, "%22");

  const selectedBorderStyle = `${props.selected ? "border-blue-500" : "border-transparent"}`;
  const dataUrl = `data:image/svg+xml,${encoded}`;

  return <div className="flex-1 overflow-auto p-2">
    <img src={dataUrl} alt="SVG" className={`block cursor-pointer border-4 transition-all duration-300 ${selectedBorderStyle}`} onClick={props.onClick} />
  </div>
}


/**
 * Generated by chatGPT
 * TODO RadStr: Not sure - I don't want to write sanitization - probably remove in favor of putting svg data into url and using <img>
 */
// @ts-ignore
function SvgRenderer(props: { svgString: string }) {
  return (
    <div
      dangerouslySetInnerHTML={{ __html: props.svgString }}
    />
  );
}


export default SvgVisualDiff;
